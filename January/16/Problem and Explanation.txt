380. Insert Delete GetRandom O(1)

Implement the RandomizedSet class:

RandomizedSet() Initializes the RandomizedSet object.
bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.
bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.
int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.
You must implement the functions of the class such that each function works in average O(1) time complexity.

 

Example 1:

Input
["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]
[[], [1], [2], [2], [], [1], [2], []]
Output
[null, true, false, true, 2, true, false, 2]

Explanation
RandomizedSet randomizedSet = new RandomizedSet();
randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomizedSet.remove(2); // Returns false as 2 does not exist in the set.
randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].
randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.
randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].
randomizedSet.insert(2); // 2 was already in the set, so return false.
randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.
 

Constraints:

-231 <= val <= 231 - 1
At most 2 * 105 calls will be made to insert, remove, and getRandom.
There will be at least one element in the data structure when getRandom is called.



Explanation:

1. Constructor (`RandomizedSet()`):
   - This initializes the `RandomizedSet` object. In your case, it initializes an `unordered_set` named `s` to store unique elements.

2. Insert (`bool insert(int val) ):
   - This method inserts an item `val` into the set if it is not already present.
   - It uses the `find` function of the unordered_set to check if `val` is already in the set.
   - If `val` is not found (`s.find(val) == s.end()`), it is inserted into the set using `s.insert(val)` and returns `true`.
   - If `val` is found, it returns `false` as the item is already present.

3. Remove (`bool remove(int val) ):
   - This method removes an item `val` from the set if it is present.
   - It uses the `find` function of the unordered_set to check if `val` is present in the set.
   - If `val` is found (`s.find(val) != s.end()`), it is removed from the set using `s.erase(val)` and returns `true`.
   - If `val` is not found, it returns `false` as the item is not present.

4. GetRandom (`int getRandom() ):
   - This method returns a random element from the current set of elements.
   - It uses the `rand()` function to generate a random position within the size of the set (`rand() % s.size()`).
   - The `next` function is then used to get an iterator to the element at the randomly generated position (`*next(s.begin(), pos)`), and this element is returned.
