645. Set Mismatch

You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.

You are given an integer array nums representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return them in the form of an array.

 

Example 1:

Input: nums = [1,2,2,4]
Output: [2,3]
Example 2:

Input: nums = [1,1]
Output: [1,2]
 

Constraints:

2 <= nums.length <= 104
1 <= nums[i] <= 104


Explanation:

Intuition:
Recognize the pattern of numbers in the range 1 to n. Since the range is 1 to n, map the numbers to their corresponding indices in the vector.

Approach:
The approach involves marking the elements in the vector. Since vectors use 0-based indexing, mark the element at index `abs(element) - 1` as negative. Carefully mark the absolute index by using `abs(...)`.

Iterate through the entire vector. If a negative number is encountered again, it indicates a duplicate because the range of numbers is from 1 to n, and the index of the repeated number was marked negative.

After identifying the duplicate, check for the missing number. In a loop, find the positive number, as the missing number will be at the index (iterator + 1).

So, to sum up, mark duplicate by making the corresponding index negative, and find the missing number by locating the positive index in the vector.
