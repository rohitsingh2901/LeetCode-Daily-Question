446. Arithmetic Slices II - Subsequence

Given an integer array nums, return the number of all the arithmetic subsequences of nums.

A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.
For example, [1, 1, 2, 5, 7] is not an arithmetic sequence.
A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.

For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].
The test cases are generated so that the answer fits in 32-bit integer.

 

Example 1:

Input: nums = [2,4,6,8,10]
Output: 7
Explanation: All arithmetic subsequence slices are:
[2,4,6]
[4,6,8]
[6,8,10]
[2,4,6,8]
[4,6,8,10]
[2,4,6,8,10]
[2,6,10]
Example 2:

Input: nums = [7,7,7,7,7]
Output: 16
Explanation: Any subsequence of this array is arithmetic.
 

Constraints:

1  <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1


Explanation:

1. Initialization:
   - "n = nums.size();" calculates the length of the input array "nums".
   - "map<pair<int, long long>, int> dp;" initializes a map "dp" where:
       - Key: "pair<int, long long>" represents the indices ("i" and "j") and the difference between "nums[i]" and "nums[j]".
       - Value: "int" stores the count of subsequences ending at index "i" with a specific difference.

2. Iteration through the array:
   - Nested loops "for(int i = 0; i < n; i++)" and "for(int j = 0; j < i; j++)" iterate through the elements of the array to check all possible pairs of indices "i" and "j" where "i" > "j".

3. Calculating differences and updating the map:
   - "ll diff = (ll)nums[i] - (ll)nums[j];" calculates the difference between "nums[i]" and "nums[j]" as a "long long" to handle larger differences.
   - "dp[{i, diff}]++;" increments the count of subsequences ending at index "i" with the difference "diff".
   - "if(dp.find({j, diff}) != dp.end()) { ... }" checks if there exists a previous subsequence ending at index "j" with the same difference "diff".
   - If found, it updates the count for the current index "i" by adding the count of subsequences ending at index "j" with the same difference "diff". Also, it adds this count to the overall "ans".

4. Returning the result:
   - "return ans;" returns the total count of arithmetic subsequences found.

Time Complexity:
- The nested loops iterate through the array, which results in a time complexity of O(n^2).
- Inside the loops, map operations ("dp.find", insertion, and accessing elements) are performed, which can take additional time depending on the map's size and operations. This can add to the time complexity, making the overall time complexity higher than O(n^2).
