You are given an integer array nums. You need to create a 2D array from nums satisfying the following conditions:

The 2D array should contain only the elements of the array nums.
Each row in the 2D array contains distinct integers.
The number of rows in the 2D array should be minimal.
Return the resulting array. If there are multiple answers, return any of them.

Note that the 2D array can have a different number of elements on each row.

 

Example 1:

Input: nums = [1,3,4,1,2,3,1]
Output: [[1,3,4,2],[1,3],[1]]
Explanation: We can create a 2D array that contains the following rows:
- 1,3,4,2
- 1,3
- 1
All elements of nums were used, and each row of the 2D array contains distinct integers, so it is a valid answer.
It can be shown that we cannot have less than 3 rows in a valid array.

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= nums.length



Explanation:

1. `unordered_map<int, int> mp;`: This map (`mp`) is used to store the frequency of each number from the `nums` array. The key represents the number, and the value represents its frequency.

2. `int cnt = 0;`: This variable `cnt` is used to keep track of the maximum frequency found while iterating through `nums`.

3. `for (auto a : nums) { mp[a]++; cnt = max(cnt, mp[a]); }`: This loop iterates through each number in the `nums` array. For each number `a`, it increments its frequency in the `mp` map and updates `cnt` with the maximum frequency found.

4. `vector<vector<int>> v(cnt);`: This declares a 2D vector `v` with `cnt` number of rows. Each row will store numbers based on their frequency.

5. `for (auto a : mp) { int num = a.first; int freq = a.second; for (int i = 0; i < freq; i++) { v[i].push_back(num); } }`:
   - The loop iterates through the `mp` map, where `a.first` represents the number and `a.second` represents its frequency.
   - For each number `num` and its frequency `freq`, it adds `num` to its corresponding row in the 2D vector `v`. The number is added `freq` times to the rows to fulfill the condition that each row contains distinct integers.

6. Finally, it returns the resulting 2D vector `v` that satisfies the conditions specified in the problem statement.