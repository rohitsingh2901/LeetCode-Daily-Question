2125. Number of Laser Beams in a Bank

Anti-theft security devices are activated inside a bank. You are given a 0-indexed binary string array bank representing the floor plan of the bank, which is an m x n 2D matrix. bank[i] represents the ith row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device.

There is one laser beam between any two security devices if both conditions are met:

The two devices are located on two different rows: r1 and r2, where r1 < r2.
For each row i where r1 < i < r2, there are no security devices in the ith row.
Laser beams are independent, i.e., one beam does not interfere nor join with another.

Return the total number of laser beams in the bank.

 

Example 1:


Input: bank = ["011001","000000","010100","001000"]
Output: 8
Explanation: Between each of the following device pairs, there is one beam. In total, there are 8 beams:
 * bank[0][1] -- bank[2][1]
 * bank[0][1] -- bank[2][3]
 * bank[0][2] -- bank[2][1]
 * bank[0][2] -- bank[2][3]
 * bank[0][5] -- bank[2][1]
 * bank[0][5] -- bank[2][3]
 * bank[2][1] -- bank[3][2]
 * bank[2][3] -- bank[3][2]
Note that there is no beam between any device on the 0th row with any on the 3rd row.
This is because the 2nd row contains security devices, which breaks the second condition.
Example 2:


Input: bank = ["000","111","000"]
Output: 0
Explanation: There does not exist two devices located on two different rows.
 

Constraints:

m == bank.length
n == bank[i].length
1 <= m, n <= 500
bank[i][j] is either '0' or '1'.





Explanation:

1. `vector<int> c(bank.size());`: This line initializes a vector `c` of integers with a size equal to the number of rows in the `bank` matrix. This vector `c` is intended to store the count of security devices in each row.

2. `for(int i = 0; i < bank.size(); i++) { ... }`: This loop iterates through each row of the `bank` matrix.

3. `int ct = 0;`: This variable `ct` is initialized to count the number of security devices in a particular row.

4. `for(int j = 0; j < bank[0].size(); j++) { ... }`: This nested loop iterates through each column of the current row.

5. `if(bank[i][j] == '1') { ct++; }`: Within the inner loop, this condition checks if the cell contains a security device ('1') and increments the count `ct` if true.

6. `if(ct) { c.push_back(ct); }`: After counting the security devices in a row (`ct`), if the count is non-zero (indicating at least one security device), it is pushed back to the `c` vector. However, this is incorrect as it leads to the addition of new counts into the vector `c` rather than updating the counts for rows.

7. `int ans = 0;`: Initialization of the variable `ans` to store the total number of laser beams.

8. `for(int i = 1; i < c.size(); i++) { ... }`: This loop starts from the second element of the `c` vector and calculates the total number of laser beams by multiplying the count of security devices in the current row with the count of security devices in the previous row and adding it to the `ans`.