70. Climbing Stairs

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45

Explanation:

1. Memoization Array:
   - An array named "dp" of size 46 is used for memoization. This array stores the results of previously computed subproblems to avoid redundant calculations.

2. Base Case:
   - If the input "n" is 1, 2, or 3, the function returns "n" immediately. This serves as the base case for the recursion.

3. Memoization Check:
   - Before making recursive calls, the code checks whether the result for the current value of "n" has already been computed and stored in the "dp" array. If yes, it returns the precomputed result.

4. Recursive Approach:
   - If the base case is not met and the result for the current "n" is not memoized, the function recursively calls itself for "n-1" and "n-2". The results of these recursive calls are summed up and stored in the "dp" array for future reference.

In summary, the code follows a top-down dynamic programming approach, where the problem is solved recursively by breaking it down into smaller subproblems. The results of subproblems are memoized to avoid redundant computations, improving the efficiency of the solution. However, for large values of "n", a bottom-up dynamic programming approach is often more efficient.