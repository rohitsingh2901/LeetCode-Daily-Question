232. Implement Queue using Stacks

Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).

Implement the MyQueue class:

void push(int x) Pushes element x to the back of the queue.
int pop() Removes the element from the front of the queue and returns it.
int peek() Returns the element at the front of the queue.
boolean empty() Returns true if the queue is empty, false otherwise.
Notes:

You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.
 

Example 1:

Input
["MyQueue", "push", "push", "peek", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 1, 1, false]

Explanation
MyQueue myQueue = new MyQueue();
myQueue.push(1); // queue is: [1]
myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
myQueue.peek(); // return 1
myQueue.pop(); // return 1, queue is [2]
myQueue.empty(); // return false
 

Constraints:

1 <= x <= 9
At most 100 calls will be made to push, pop, peek, and empty.
All the calls to pop and peek are valid.
 

Follow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.



Explanation:

- "MyQueue()": Constructor for initializing the queue. It doesn't perform any specific actions as the stacks are already initialized by default.
- "push(int x)": Pushes the element "x" onto the queue by simply pushing it onto "st1".
- "pop()": Removes and returns the front element of the queue. If "st2" is empty, it transfers all elements from "st1" to "st2" to ensure the order is maintained. Then it pops and returns the top element of "st2".
- "peek()": Returns the front element of the queue without removing it. If "st2" is empty, it transfers all elements from "st1" to "st2" to ensure the order is maintained. Then it returns the top element of "st2".
- "empty()": Checks if the queue is empty by checking if both "st1" and "st2" are empty.

This implementation follows the same logic as described earlier. It maintains two stacks ("st1" and "st2") to simulate the queue behavior efficiently. The time complexity of each operation is amortized O(1), which is achieved by transferring elements between stacks only when necessary.