268. Missing Number

Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

 
Example 1:

Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
Example 2:

Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
Example 3:

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
 

Constraints:

n == nums.length
1 <= n <= 104
0 <= nums[i] <= n
All the numbers of nums are unique.

Explanation:

1. `int missingNumber(vector<int>& nums)`: This is the function definition. It takes a vector of integers `nums` as input and returns an integer, which is the missing number.

2. `int sum = 0, n = nums.size();`: Two variables are declared and initialized. `sum` is initialized to 0, and `n` is initialized to the size of the input vector `nums`, which represents the number of elements in the array.

3. `for(auto e: nums) sum+=e;`: This is a range-based for loop that iterates over each element `e` in the vector `nums`. For each iteration, it adds the value of `e` to the variable `sum`, effectively calculating the sum of all elements in the array.

4. `return (n*(n+1))/2 - sum;`: After calculating the sum of all elements in the array, this line computes the missing number. It uses the formula for the sum of an arithmetic series `(n*(n+1))/2` to calculate the expected sum of numbers from 0 to `n`. Then, it subtracts the actual sum `sum` from the expected sum to find the missing number.

