1043. Partition Array for Maximum Sum

Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.

Return the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: arr = [1,15,7,9,2,5,10], k = 3
Output: 84
Explanation: arr becomes [15,15,15,9,10,10,10]
Example 2:

Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4
Output: 83
Example 3:

Input: arr = [1], k = 1
Output: 1
 

Constraints:

1 <= arr.length <= 500
0 <= arr[i] <= 109
1 <= k <= arr.length

Explanation:

- "solve" function is a recursive function that tries all possible partitions starting from index "i" and returns the maximum sum that can be obtained.
- It maintains a dynamic programming array "dp" to store the maximum sum computed up to each index.
- The "maxSumAfterPartitioning" function initializes the "dp" array and starts the recursion from index 0.


1. "solve" function:
   - This function is used to recursively solve the problem. It considers all possible partitions starting from index "i" and returns the maximum sum that can be obtained.
   - Parameters:
     - "arr": The input integer array.
     - "k": The maximum length of subarrays allowed.
     - "dp": The dynamic programming array storing the maximum sum computed up to each index.
     - "i": The current index in the array.
   - Base case:
     - If "i" reaches the end of the array, it returns 0.
   - If "dp[i]" is already computed, it returns "dp[i]".
   - It initializes "ans" and "maxans" to "INT_MIN" (the minimum possible integer value) and "len" to 0.
   - It iterates through the next "k" elements or until the end of the array.
     - For each iteration, it updates "ans" with the maximum value in the current partition.
     - It calculates the sum of the current partition and recursively calls "solve" for the next partition.
     - It updates "maxans" with the maximum sum obtained so far.
   - Finally, it stores the maximum sum for the current index in the "dp" array and returns it.

2. "maxSumAfterPartitioning" function:
   - This function initializes the "dp" array with "-1" and calls the "solve" function to compute the maximum sum after partitioning.
   - Parameters:
     - "arr": The input integer array.
     - "k": The maximum length of subarrays allowed.
   - It returns the result obtained from the "solve" function.

