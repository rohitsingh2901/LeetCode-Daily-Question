2966. Divide Array Into Arrays With Max Difference

You are given an integer array nums of size n and a positive integer k.

Divide the array into one or more arrays of size 3 satisfying the following conditions:

Each element of nums should be in exactly one array.
The difference between any two elements in one array is less than or equal to k.
Return a 2D array containing all the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return any of them.

 

Example 1:

Input: nums = [1,3,4,8,7,9,3,5,1], k = 2
Output: [[1,1,3],[3,4,5],[7,8,9]]
Explanation: We can divide the array into the following arrays: [1,1,3], [3,4,5] and [7,8,9].
The difference between any two elements in each array is less than or equal to 2.
Note that the order of elements is not important.
Example 2:

Input: nums = [1,3,3,2,7,3], k = 3
Output: []
Explanation: It is not possible to divide the array satisfying all the conditions.
 

Constraints:

n == nums.length
1 <= n <= 105
n is a multiple of 3.
1 <= nums[i] <= 105
1 <= k <= 105

Explanation:

1. Sorting the Input Array: The function starts by sorting the input array "nums" using the "sort" function from the C++ standard library. This step ensures that elements are arranged in ascending order, which is crucial for creating subarrays that satisfy the condition of having differences less than or equal to "k".

2. Checking if the Size of "nums" is a Multiple of 3: The function checks if the size of the input array "nums" is a multiple of 3. If it's not, then it's impossible to divide the array into subarrays of size 3. In such cases, the function returns an empty 2D vector "{}".

3. Iterating through the Sorted Array: The function then initializes an empty 2D vector "result" to store the subarrays. It iterates through the sorted array using a "while" loop, starting from index "i = 0".

4. Creating Subarrays: Inside the loop, it checks if it's possible to create a subarray of size 3 starting from index "i". It verifies this by checking if the difference between the third element ("nums[i + 2]") and the first element ("nums[i]") is less than or equal to "k". If this condition is met, it constructs a subarray of size 3 using the elements at indices "i", "i + 1", and "i + 2", and appends it to the "result" vector. Then, it increments "i" by 3 to move to the next possible starting index for a subarray.

5. Returning the Result: If it's not possible to create a subarray of size 3 starting from index "i", it means that the conditions cannot be satisfied for dividing the array. In such cases, the function returns an empty 2D vector "{}". If all subarrays are successfully created, the function returns the constructed "result" vector containing all the subarrays that satisfy the conditions.