19. Remove Nth Node From End of List

Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz


Explanation:

1. ListNode Definition: The code assumes a ListNode structure defined elsewhere, which consists of at least two fields: `val` (representing the value of the node) and `next` (a pointer to the next node in the linked list).
2. Method Definition: The class `Solution` contains a single method `removeNthFromEnd`, which takes a pointer to the head of the linked list and an integer `n`.
3. Dummy Node Creation: A dummy node `res` is created and its `next` pointer is set to the head of the linked list. This dummy node is used to handle edge cases where the node to be removed is the head of the list.
4. Moving the Second Pointer: A pointer `s` is initialized to the dummy node `res`. It is then moved forward `n` steps in order to position `s` n nodes ahead of the first pointer.
5. Moving Both Pointers Simultaneously: Two pointers `s` and `f` are moved simultaneously until the end of the list. Pointer `s` traverses the list while pointer `f` maintains a gap of `n` nodes between them. This ensures that `f` points to the node before the one to be removed.
6. Removing the Nth Node: Once both pointers reach the end of the list, pointer `f` points to the node before the one to be removed. The nth node from the end is then removed by adjusting the `next` pointer of the preceding node (`f->next = f->next->next`).
7. Returning the Updated List: The method returns the `next` pointer of the dummy node `res`, which represents the head of the updated list after removing the nth node from the end.
