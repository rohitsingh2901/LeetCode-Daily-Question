57. Insert Interval

You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.

Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).

Return intervals after the insertion.

Note that you don't need to modify intervals in-place. You can make a new array and return it.

 

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
 

Constraints:

0 <= intervals.length <= 10^4
intervals[i].length == 2
0 <= starti <= endi <= 10^5
intervals is sorted by starti in ascending order.
newInterval.length == 2
0 <= start <= end <= 10^5


Explanation:

1. Initialization: 
   - result: A vector of vectors of integers to store the final result.
   - n: An integer representing the size of the intervals vector.
   - index: An integer to keep track of the current index while iterating through intervals.

2. Add Intervals Before New Interval:
   - Iterate through intervals until either all intervals before newInterval are added or the end of intervals is reached.
   - If the end of an interval is less than the start of newInterval, add the interval to the result.

3. Merge Overlapping Intervals:
   - Iterate through intervals starting from the current index.
   - If the start of an interval is less than or equal to the end of newInterval, merge the intervals:
      - Update the start of newInterval to the minimum of the current interval's start and newInterval's start.
      - Update the end of newInterval to the maximum of the current interval's end and newInterval's end.
      - Move to the next interval.
   - After merging, add the merged newInterval to the result.

4. Add Remaining Intervals:
   - Add any remaining intervals from intervals to the result.

5. Return Result: Return the result vector containing the merged intervals.


Time Complexity:
The time complexity is O(N), where N is the number of intervals in the intervals vector.
We traverse the intervals vector once to insert intervals before the new interval.
We may traverse the intervals vector again to merge overlapping intervals.
We traverse the intervals vector once more to add remaining intervals.

Space Complexity:
The space complexity is O(N) because we use an additional vector result to store the intervals.
In the worst case, if there are no overlapping intervals and the new interval is inserted at the end, the size of result will be the size of intervals plus one.