452. Minimum Number of Arrows to Burst Balloons

There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.

Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the array points, return the minimum number of arrows that must be shot to burst all balloons.

 

Example 1:

Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].
Example 2:

Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4
Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.
Example 3:

Input: points = [[1,2],[2,3],[3,4],[4,5]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].
- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].
 

Constraints:

1 <= points.length <= 10^5
points[i].length == 2
-2^31 <= xstart < xend <= 2^31 - 1

Explanation:
Sure, let's break down the provided C++ solution step by step:

1. Sorting the balloons by their end points:
   This lambda function is used as a custom comparator to sort the balloons. Balloons are sorted primarily by their end points (a[1] and b[1]). If two balloons have the same end point, they are then sorted by their start points (a[0] and b[0]). This sorting ensures that balloons with earlier end points come before balloons with later end points.

2. Initializing variables:
   - ans: This variable will store the minimum number of arrows needed to burst all balloons. It's initially set to 0 and later updated accordingly.
   - n: This variable stores the total number of balloons.
   - prev: This variable tracks the end point of the previous balloon. It's initialized with the end point of the first balloon.

3. Iterating through the balloons:
   - The loop starts from the second balloon because the first balloon's end point is already stored in prev.
   - For each balloon, it checks if the previous end point (prev) is greater than or equal to the current balloon's start point (p[i][0]). If so, it means the current balloon can be burst by the same arrow as the previous balloon, so it continues to the next balloon without incrementing the arrow count.
   - If the current balloon cannot be burst by the same arrow, it means we need another arrow. So, it increments the ans variable and updates prev with the end point of the current balloon.

4. Returning the minimum number of arrows:
   Finally, it returns the minimum number of arrows needed to burst all balloons.


- Time Complexity: O(n log n)
- Space Complexity: O(n)
