948. Bag of Tokens

You start with an initial power of power, an initial score of 0, and a bag of tokens given as an integer array tokens, where each tokens[i] donates the value of tokeni.

Your goal is to maximize the total score by strategically playing these tokens. In one move, you can play an unplayed token in one of the two ways (but not both for the same token):

Face-up: If your current power is at least tokens[i], you may play tokeni, losing tokens[i] power and gaining 1 score.
Face-down: If your current score is at least 1, you may play tokeni, gaining tokens[i] power and losing 1 score.
Return the maximum possible score you can achieve after playing any number of tokens.

 

Example 1:

Input: tokens = [100], power = 50

Output: 0

Explanation: Since your score is 0 initially, you cannot play the token face-down. You also cannot play it face-up since your power (50) is less than tokens[0] (100).

Example 2:

Input: tokens = [200,100], power = 150

Output: 1

Explanation: Play token1 (100) face-up, reducing your power to 50 and increasing your score to 1.

There is no need to play token0, since you cannot play it face-up to add to your score. The maximum score achievable is 1.

Example 3:

Input: tokens = [100,200,300,400], power = 200

Output: 2

Explanation: Play the tokens in this order to get a score of 2:

Play token0 (100) face-up, reducing power to 100 and increasing score to 1.
Play token3 (400) face-down, increasing power to 500 and reducing score to 0.
Play token1 (200) face-up, reducing power to 300 and increasing score to 1.
Play token2 (300) face-up, reducing power to 0 and increasing score to 2.
The maximum score achievable is 2.

 

Constraints:

0 <= tokens.length <= 1000
0 <= tokens[i], power < 104


Explanation:


1. Sorting the Tokens: The `tokens` array is sorted in ascending order using the `std::sort` function from the C++ Standard Library. This ensures that tokens with lower values come first.

2. Initializing Pointers and Variables: 
   - `i` is initialized to 0, pointing to the start of the sorted tokens array.
   - `j` is initialized to `tokens.size() - 1`, pointing to the end of the sorted tokens array.
   - `maxScore` and `score` are initialized to 0. `maxScore` keeps track of the maximum score achieved so far, while `score` keeps track of the current score.

3. Main Loop: The code enters a while loop that continues until `i` crosses `j`, meaning all tokens have been considered.
   
4. Token Handling:
   - If the current token at `i` can be played face-up (i.e., its value is less than or equal to the available power), it is played face-up:
     - The power is decreased by the value of the token.
     - The score is increased by 1.
     - `i` is incremented to move to the next token.
     - `maxScore` is updated if the current score is greater than the previous maximum score.
   - If the current score is positive (indicating some tokens have been played), but the current token at `i` cannot be played face-up due to insufficient power, the token at `j` is played face-down:
     - The power is increased by the value of the token at `j`.
     - `j` is decremented to move to the next token from the end.
     - The score is decreased by 1.
   - If we cannot play any more tokens (both conditions above are not satisfied), the loop breaks.
   
5. Returning the Result: After the loop, the function returns the maximum score achieved.
